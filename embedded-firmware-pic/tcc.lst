;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 09/11/2020 21:49:23
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2847      	GOTO       71
_I2C_Repeated_Start:
;tcc.c,102 :: 		void I2C_Repeated_Start(void){                   // Sinal I2C repeated start
;tcc.c,103 :: 		SSPCON2.RSEN = 1;                            // Repeated start condition
0x0003	0x1683      	BSF        STATUS, 5
0x0004	0x1303      	BCF        STATUS, 6
0x0005	0x1491      	BSF        SSPCON2, 1
;tcc.c,104 :: 		while(!PIR1.SSPIF);                          // Espera o fim da start condition
L_I2C_Repeated_Start11:
0x0006	0x1283      	BCF        STATUS, 5
0x0007	0x198C      	BTFSC      PIR1, 3
0x0008	0x280A      	GOTO       L_I2C_Repeated_Start12
0x0009	0x2806      	GOTO       L_I2C_Repeated_Start11
L_I2C_Repeated_Start12:
;tcc.c,105 :: 		PIR1.SSPIF = 0;
0x000A	0x118C      	BCF        PIR1, 3
;tcc.c,106 :: 		}
L_end_I2C_Repeated_Start:
0x000B	0x0008      	RETURN
; end of _I2C_Repeated_Start
_I2C_Start:
;tcc.c,90 :: 		void I2C_Start(void){                             // Essa função inicializa a start condition no barramento I2C
;tcc.c,91 :: 		SSPCON2.SEN = 1;                              // Start condition
0x000C	0x1683      	BSF        STATUS, 5
0x000D	0x1303      	BCF        STATUS, 6
0x000E	0x1411      	BSF        SSPCON2, 0
;tcc.c,92 :: 		while(!PIR1.SSPIF);                           // Espera o fim da start condition
L_I2C_Start7:
0x000F	0x1283      	BCF        STATUS, 5
0x0010	0x198C      	BTFSC      PIR1, 3
0x0011	0x2813      	GOTO       L_I2C_Start8
0x0012	0x280F      	GOTO       L_I2C_Start7
L_I2C_Start8:
;tcc.c,93 :: 		PIR1.SSPIF = 0;
0x0013	0x118C      	BCF        PIR1, 3
;tcc.c,94 :: 		}
L_end_I2C_Start:
0x0014	0x0008      	RETURN
; end of _I2C_Start
_I2C_Write:
;tcc.c,96 :: 		void I2C_Write(unsigned char i2c_byte){          // Transmite dados pela I2C
;tcc.c,97 :: 		SSPBUF = i2c_byte;                           // Dados para transmitir
0x0015	0x1283      	BCF        STATUS, 5
0x0016	0x1303      	BCF        STATUS, 6
0x0017	0x082A      	MOVF       FARG_I2C_Write_i2c_byte, 0
0x0018	0x0093      	MOVWF      SSPBUF
;tcc.c,98 :: 		while(!PIR1.SSPIF);                          // Espera o fim da transmissão
L_I2C_Write9:
0x0019	0x198C      	BTFSC      PIR1, 3
0x001A	0x281C      	GOTO       L_I2C_Write10
0x001B	0x2819      	GOTO       L_I2C_Write9
L_I2C_Write10:
;tcc.c,99 :: 		PIR1.SSPIF = 0;
0x001C	0x118C      	BCF        PIR1, 3
;tcc.c,100 :: 		}
L_end_I2C_Write:
0x001D	0x0008      	RETURN
; end of _I2C_Write
_I2C_Read:
;tcc.c,114 :: 		unsigned char I2C_Read(unsigned char master_ack){            // Função para a leitura da I2C e envio do bit ACK
;tcc.c,115 :: 		SSPCON2.RCEN = 1;                                        // Habilita recepção no master Mode
0x001E	0x1683      	BSF        STATUS, 5
0x001F	0x1303      	BCF        STATUS, 6
0x0020	0x1591      	BSF        SSPCON2, 3
;tcc.c,116 :: 		while(!PIR1.SSPIF);                                      // Espera o fim da recepção
L_I2C_Read15:
0x0021	0x1283      	BCF        STATUS, 5
0x0022	0x198C      	BTFSC      PIR1, 3
0x0023	0x2825      	GOTO       L_I2C_Read16
0x0024	0x2821      	GOTO       L_I2C_Read15
L_I2C_Read16:
;tcc.c,117 :: 		PIR1.SSPIF = 0;
0x0025	0x118C      	BCF        PIR1, 3
;tcc.c,118 :: 		SSPCON2.ACKDT = master_ack;
0x0026	0x182A      	BTFSC      FARG_I2C_Read_master_ack, 0
0x0027	0x282B      	GOTO       L__I2C_Read27
0x0028	0x1683      	BSF        STATUS, 5
0x0029	0x1291      	BCF        SSPCON2, 5
0x002A	0x282D      	GOTO       L__I2C_Read28
L__I2C_Read27:
0x002B	0x1683      	BSF        STATUS, 5
0x002C	0x1691      	BSF        SSPCON2, 5
L__I2C_Read28:
;tcc.c,119 :: 		SSPCON2.ACKEN = 1;                                       // Inicia o envio do bit ack do master para o slave
0x002D	0x1611      	BSF        SSPCON2, 4
;tcc.c,120 :: 		while(!PIR1.SSPIF);                                      // Espera o fim do ack
L_I2C_Read17:
0x002E	0x1283      	BCF        STATUS, 5
0x002F	0x198C      	BTFSC      PIR1, 3
0x0030	0x2832      	GOTO       L_I2C_Read18
0x0031	0x282E      	GOTO       L_I2C_Read17
L_I2C_Read18:
;tcc.c,121 :: 		PIR1.SSPIF = 0;
0x0032	0x118C      	BCF        PIR1, 3
;tcc.c,122 :: 		return SSPBUF;
0x0033	0x0813      	MOVF       SSPBUF, 0
0x0034	0x00F0      	MOVWF      R0
;tcc.c,123 :: 		}
L_end_I2C_Read:
0x0035	0x0008      	RETURN
; end of _I2C_Read
_EUSART_write_char:
;tcc.c,125 :: 		void EUSART_write_char(unsigned char msg){     // Essa função envia um único byte pela serial EUSART
;tcc.c,126 :: 		while(!PIR1.TXIF);                         // Espera o buffer de transmissão esvaziar (Se ele estiver cheio)
L_EUSART_write_char19:
0x0036	0x1283      	BCF        STATUS, 5
0x0037	0x1303      	BCF        STATUS, 6
0x0038	0x1A0C      	BTFSC      PIR1, 4
0x0039	0x283B      	GOTO       L_EUSART_write_char20
0x003A	0x2836      	GOTO       L_EUSART_write_char19
L_EUSART_write_char20:
;tcc.c,127 :: 		TXREG = msg;
0x003B	0x082A      	MOVF       FARG_EUSART_write_char_msg, 0
0x003C	0x0099      	MOVWF      TXREG
;tcc.c,128 :: 		}
L_end_EUSART_write_char:
0x003D	0x0008      	RETURN
; end of _EUSART_write_char
_I2C_Stop:
;tcc.c,108 :: 		void I2C_Stop(void){                             // Essa função inicializa a stop condition no barramento I2C
;tcc.c,109 :: 		SSPCON2.PEN = 1;                             // Stop condition
0x003E	0x1683      	BSF        STATUS, 5
0x003F	0x1303      	BCF        STATUS, 6
0x0040	0x1511      	BSF        SSPCON2, 2
;tcc.c,110 :: 		while(!PIR1.SSPIF);                          // Espera o fim da stop condition
L_I2C_Stop13:
0x0041	0x1283      	BCF        STATUS, 5
0x0042	0x198C      	BTFSC      PIR1, 3
0x0043	0x2845      	GOTO       L_I2C_Stop14
0x0044	0x2841      	GOTO       L_I2C_Stop13
L_I2C_Stop14:
;tcc.c,111 :: 		PIR1.SSPIF = 0;
0x0045	0x118C      	BCF        PIR1, 3
;tcc.c,112 :: 		}
L_end_I2C_Stop:
0x0046	0x0008      	RETURN
; end of _I2C_Stop
_main:
;tcc.c,13 :: 		void main() {
;tcc.c,15 :: 		int  ACCEL_XOUT=0, ACCEL_YOUT=0, ACCEL_ZOUT=0;
0x0047	0x1283      	BCF        STATUS, 5
0x0048	0x1303      	BCF        STATUS, 6
0x0049	0x01A4      	CLRF       main_ACCEL_XOUT_L0
0x004A	0x01A5      	CLRF       main_ACCEL_XOUT_L0+1
0x004B	0x01A6      	CLRF       main_ACCEL_YOUT_L0
0x004C	0x01A7      	CLRF       main_ACCEL_YOUT_L0+1
0x004D	0x01A8      	CLRF       main_ACCEL_ZOUT_L0
0x004E	0x01A9      	CLRF       main_ACCEL_ZOUT_L0+1
;tcc.c,17 :: 		ANSEL = 0x00;                                                               // Todas as portas são digitais AN0 até AN7
0x004F	0x1683      	BSF        STATUS, 5
0x0050	0x1703      	BSF        STATUS, 6
0x0051	0x0188      	CLRF       ANSEL
;tcc.c,18 :: 		ANSELH = 0x00;                                                              // Todas as portas são digitais AN8 até AN13
0x0052	0x0189      	CLRF       ANSELH
;tcc.c,19 :: 		TRISA = 0xFF;                                                               // Todas as IOs do PORTA são input
0x0053	0x30FF      	MOVLW      255
0x0054	0x1303      	BCF        STATUS, 6
0x0055	0x0085      	MOVWF      TRISA
;tcc.c,20 :: 		TRISB = 0xFF;                                                               // Todas as IOs do PORTB são input
0x0056	0x30FF      	MOVLW      255
0x0057	0x0086      	MOVWF      TRISB
;tcc.c,21 :: 		TRISC = 0xFF;                                                               // Todas as IOs do PORTC são input
0x0058	0x30FF      	MOVLW      255
0x0059	0x0087      	MOVWF      TRISC
;tcc.c,22 :: 		TRISE = 0xFF;                                                               // Todas as IOs do PORTE são input
0x005A	0x30FF      	MOVLW      255
0x005B	0x0089      	MOVWF      TRISE
;tcc.c,25 :: 		BAUDCTL.BRG16=1;
0x005C	0x1703      	BSF        STATUS, 6
0x005D	0x1587      	BSF        BAUDCTL, 3
;tcc.c,26 :: 		SPBRGH=0x00;
0x005E	0x1303      	BCF        STATUS, 6
0x005F	0x019A      	CLRF       SPBRGH
;tcc.c,27 :: 		SPBRG=0x21;                                // Baud rate de 115200
0x0060	0x3021      	MOVLW      33
0x0061	0x0099      	MOVWF      SPBRG
;tcc.c,28 :: 		RCSTA=0x90;                                // Serial port habilitado, recepção de 8 bits, habilita recepção.
0x0062	0x3090      	MOVLW      144
0x0063	0x1283      	BCF        STATUS, 5
0x0064	0x0098      	MOVWF      RCSTA
;tcc.c,29 :: 		TXSTA=0x24;                                // Modo de transmissão de 8 bits, eusart no modo assíncrono, high speed baud rate, habilita transmissão.
0x0065	0x3024      	MOVLW      36
0x0066	0x1683      	BSF        STATUS, 5
0x0067	0x0098      	MOVWF      TXSTA
;tcc.c,32 :: 		SSPSTAT=0x00;                                                               // Controle da taxa de varredura para modo de alta velocidade (400kz)
0x0068	0x0194      	CLRF       SSPSTAT
;tcc.c,33 :: 		SSPCON=0x28;                                                                // Habilita MSSP no modo master clock = Fosc/(4*(SSPADD+1))
0x0069	0x3028      	MOVLW      40
0x006A	0x1283      	BCF        STATUS, 5
0x006B	0x0094      	MOVWF      SSPCON
;tcc.c,34 :: 		SSPCON2=0x00;                                                               // Não inicia nada ainda, permance em idle state
0x006C	0x1683      	BSF        STATUS, 5
0x006D	0x0191      	CLRF       SSPCON2
;tcc.c,35 :: 		SSPADD = 0x09;                                                              // I2C 400khz
0x006E	0x3009      	MOVLW      9
0x006F	0x0093      	MOVWF      SSPADD
;tcc.c,38 :: 		T1CON = 0x00;                                                               // Clock interno, prescale de 1, timer desligado.
0x0070	0x1283      	BCF        STATUS, 5
0x0071	0x0190      	CLRF       T1CON
;tcc.c,39 :: 		delay_ms(200);
0x0072	0x3005      	MOVLW      5
0x0073	0x00FB      	MOVWF      R11
0x0074	0x300F      	MOVLW      15
0x0075	0x00FC      	MOVWF      R12
0x0076	0x30F1      	MOVLW      241
0x0077	0x00FD      	MOVWF      R13
L_main0:
0x0078	0x0BFD      	DECFSZ     R13, 1
0x0079	0x2878      	GOTO       L_main0
0x007A	0x0BFC      	DECFSZ     R12, 1
0x007B	0x2878      	GOTO       L_main0
0x007C	0x0BFB      	DECFSZ     R11, 1
0x007D	0x2878      	GOTO       L_main0
;tcc.c,41 :: 		T1CON.TMR1ON = 1;                                                           // Inicia o timer 1
0x007E	0x1410      	BSF        T1CON, 0
;tcc.c,43 :: 		for(;;){
L_main1:
;tcc.c,46 :: 		I2C_Start();
0x007F	0x200C      	CALL       _I2C_Start
;tcc.c,48 :: 		I2C_Write((MPU_Addr<<1)|0);                                             // Endereço do mpu + bit W
0x0080	0x30D0      	MOVLW      208
0x0081	0x00AA      	MOVWF      FARG_I2C_Write_i2c_byte
0x0082	0x2015      	CALL       _I2C_Write
;tcc.c,49 :: 		while(SSPCON2.ACKSTAT){                                                 // Equanto slave não acknowledge
L_main4:
0x0083	0x1683      	BSF        STATUS, 5
0x0084	0x1F11      	BTFSS      SSPCON2, 6
0x0085	0x288E      	GOTO       L_main5
;tcc.c,50 :: 		if (PIR1.TMR1IF){                                                   // Se o timer 1 der overflow
0x0086	0x1283      	BCF        STATUS, 5
0x0087	0x1C0C      	BTFSS      PIR1, 0
0x0088	0x288D      	GOTO       L_main6
;tcc.c,51 :: 		PIR1.TMR1IF = 0;                                                // Reseta a flag do timer 1
0x0089	0x100C      	BCF        PIR1, 0
;tcc.c,52 :: 		I2C_Write((MPU_Addr<<1)|0);                                     // Endereço do mpu + bit W
0x008A	0x30D0      	MOVLW      208
0x008B	0x00AA      	MOVWF      FARG_I2C_Write_i2c_byte
0x008C	0x2015      	CALL       _I2C_Write
;tcc.c,53 :: 		}
L_main6:
;tcc.c,54 :: 		}
0x008D	0x2883      	GOTO       L_main4
L_main5:
0x008E	0x1283      	BCF        STATUS, 5
;tcc.c,55 :: 		I2C_Write(0x3B);                                                        // ACCEL_XOUT_H: endereço do registro do MPU a ser lido primeiro
0x008F	0x303B      	MOVLW      59
0x0090	0x00AA      	MOVWF      FARG_I2C_Write_i2c_byte
0x0091	0x2015      	CALL       _I2C_Write
;tcc.c,56 :: 		I2C_Repeated_Start();                                                   // Sinal I2C repeated start
0x0092	0x2003      	CALL       _I2C_Repeated_Start
;tcc.c,57 :: 		I2C_Write((MPU_Addr<<1)|1);                                             // Envia o endereço do MPU +  R
0x0093	0x30D1      	MOVLW      209
0x0094	0x00AA      	MOVWF      FARG_I2C_Write_i2c_byte
0x0095	0x2015      	CALL       _I2C_Write
;tcc.c,59 :: 		ACCEL_XOUT=I2C_Read(0)<<8;                                              // Lê ACCEL_XOUT_H e ACCEL_XOUT_L, envia acknowledge bit
0x0096	0x01AA      	CLRF       FARG_I2C_Read_master_ack
0x0097	0x201E      	CALL       _I2C_Read
0x0098	0x0870      	MOVF       R0, 0
0x0099	0x00A5      	MOVWF      main_ACCEL_XOUT_L0+1
0x009A	0x01A4      	CLRF       main_ACCEL_XOUT_L0
;tcc.c,60 :: 		ACCEL_XOUT+=I2C_Read(0);
0x009B	0x01AA      	CLRF       FARG_I2C_Read_master_ack
0x009C	0x201E      	CALL       _I2C_Read
0x009D	0x0870      	MOVF       R0, 0
0x009E	0x07A4      	ADDWF      main_ACCEL_XOUT_L0, 1
0x009F	0x1803      	BTFSC      STATUS, 0
0x00A0	0x0AA5      	INCF       main_ACCEL_XOUT_L0+1, 1
;tcc.c,61 :: 		EUSART_write_char(*((unsigned char*)&ACCEL_XOUT+1));                    // Envia ACCEL_XOUT_H e ACCEL_XOUT_L pela serial
0x00A1	0x0825      	MOVF       main_ACCEL_XOUT_L0+1, 0
0x00A2	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00A3	0x2036      	CALL       _EUSART_write_char
;tcc.c,62 :: 		EUSART_write_char(*((unsigned char*)&ACCEL_XOUT));
0x00A4	0x0824      	MOVF       main_ACCEL_XOUT_L0, 0
0x00A5	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00A6	0x2036      	CALL       _EUSART_write_char
;tcc.c,64 :: 		ACCEL_YOUT=I2C_Read(0)<<8;                                              // Lê ACCEL_YOUT_H e ACCEL_YOUT_L, envia acknowledge bit
0x00A7	0x01AA      	CLRF       FARG_I2C_Read_master_ack
0x00A8	0x201E      	CALL       _I2C_Read
0x00A9	0x0870      	MOVF       R0, 0
0x00AA	0x00A7      	MOVWF      main_ACCEL_YOUT_L0+1
0x00AB	0x01A6      	CLRF       main_ACCEL_YOUT_L0
;tcc.c,65 :: 		ACCEL_YOUT+=I2C_Read(0);
0x00AC	0x01AA      	CLRF       FARG_I2C_Read_master_ack
0x00AD	0x201E      	CALL       _I2C_Read
0x00AE	0x0870      	MOVF       R0, 0
0x00AF	0x07A6      	ADDWF      main_ACCEL_YOUT_L0, 1
0x00B0	0x1803      	BTFSC      STATUS, 0
0x00B1	0x0AA7      	INCF       main_ACCEL_YOUT_L0+1, 1
;tcc.c,66 :: 		EUSART_write_char(*((unsigned char*)&ACCEL_YOUT+1));                    // Envia ACCEL_YOUT_H e ACCEL_YOUT_L pela serial
0x00B2	0x0827      	MOVF       main_ACCEL_YOUT_L0+1, 0
0x00B3	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00B4	0x2036      	CALL       _EUSART_write_char
;tcc.c,67 :: 		EUSART_write_char(*((unsigned char*)&ACCEL_YOUT));
0x00B5	0x0826      	MOVF       main_ACCEL_YOUT_L0, 0
0x00B6	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00B7	0x2036      	CALL       _EUSART_write_char
;tcc.c,69 :: 		ACCEL_ZOUT=I2C_Read(0)<<8;                                              // Lê ACCEL_ZOUT_H e ACCEL_ZOUT_L, envia NOT acknowledge bit
0x00B8	0x01AA      	CLRF       FARG_I2C_Read_master_ack
0x00B9	0x201E      	CALL       _I2C_Read
0x00BA	0x0870      	MOVF       R0, 0
0x00BB	0x00A9      	MOVWF      main_ACCEL_ZOUT_L0+1
0x00BC	0x01A8      	CLRF       main_ACCEL_ZOUT_L0
;tcc.c,70 :: 		ACCEL_ZOUT+=I2C_Read(1);
0x00BD	0x3001      	MOVLW      1
0x00BE	0x00AA      	MOVWF      FARG_I2C_Read_master_ack
0x00BF	0x201E      	CALL       _I2C_Read
0x00C0	0x0870      	MOVF       R0, 0
0x00C1	0x07A8      	ADDWF      main_ACCEL_ZOUT_L0, 1
0x00C2	0x1803      	BTFSC      STATUS, 0
0x00C3	0x0AA9      	INCF       main_ACCEL_ZOUT_L0+1, 1
;tcc.c,71 :: 		EUSART_write_char(*((unsigned char*)&ACCEL_ZOUT+1));                    // Envia ACCEL_ZOUT_H e ACCEL_ZOUT_L pela serial
0x00C4	0x0829      	MOVF       main_ACCEL_ZOUT_L0+1, 0
0x00C5	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00C6	0x2036      	CALL       _EUSART_write_char
;tcc.c,72 :: 		EUSART_write_char(*((unsigned char*)&ACCEL_ZOUT));
0x00C7	0x0828      	MOVF       main_ACCEL_ZOUT_L0, 0
0x00C8	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00C9	0x2036      	CALL       _EUSART_write_char
;tcc.c,74 :: 		I2C_Stop();
0x00CA	0x203E      	CALL       _I2C_Stop
;tcc.c,76 :: 		EUSART_write_char(*((unsigned char*)&timer+1));                         // Envia tempo pela serial
0x00CB	0x0823      	MOVF       main_timer_L0+1, 0
0x00CC	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00CD	0x2036      	CALL       _EUSART_write_char
;tcc.c,77 :: 		EUSART_write_char(*((unsigned char*)&timer));
0x00CE	0x0822      	MOVF       main_timer_L0, 0
0x00CF	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00D0	0x2036      	CALL       _EUSART_write_char
;tcc.c,79 :: 		EUSART_write_char(0x0D);                                                // CR
0x00D1	0x300D      	MOVLW      13
0x00D2	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00D3	0x2036      	CALL       _EUSART_write_char
;tcc.c,80 :: 		EUSART_write_char(0x0A);                                                // Nova linha LF(Line feed))
0x00D4	0x300A      	MOVLW      10
0x00D5	0x00AA      	MOVWF      FARG_EUSART_write_char_msg
0x00D6	0x2036      	CALL       _EUSART_write_char
;tcc.c,82 :: 		T1CON.TMR1ON = 0;
0x00D7	0x1010      	BCF        T1CON, 0
;tcc.c,83 :: 		timer = TMR1L + (TMR1H<<8);
0x00D8	0x080F      	MOVF       TMR1H, 0
0x00D9	0x00F1      	MOVWF      R0+1
0x00DA	0x01F0      	CLRF       R0
0x00DB	0x0870      	MOVF       R0, 0
0x00DC	0x070E      	ADDWF      TMR1L, 0
0x00DD	0x00A2      	MOVWF      main_timer_L0
0x00DE	0x3000      	MOVLW      0
0x00DF	0x1803      	BTFSC      STATUS, 0
0x00E0	0x3E01      	ADDLW      1
0x00E1	0x0771      	ADDWF      R0+1, 0
0x00E2	0x00A3      	MOVWF      main_timer_L0+1
;tcc.c,84 :: 		TMR1L = 0;
0x00E3	0x018E      	CLRF       TMR1L
;tcc.c,85 :: 		TMR1H = 0;
0x00E4	0x018F      	CLRF       TMR1H
;tcc.c,86 :: 		T1CON.TMR1ON = 1;
0x00E5	0x1410      	BSF        T1CON, 0
;tcc.c,87 :: 		}
0x00E6	0x287F      	GOTO       L_main1
;tcc.c,88 :: 		}
L_end_main:
0x00E7	0x28E7      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003       [9]    _I2C_Repeated_Start
0x000C       [9]    _I2C_Start
0x0015       [9]    _I2C_Write
0x001E      [24]    _I2C_Read
0x0036       [8]    _EUSART_write_char
0x003E       [9]    _I2C_Stop
0x0047     [161]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x000A       [1]    PCLATH
0x000C       [1]    PIR1
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [1]    T1CON
0x0013       [1]    SSPBUF
0x0014       [1]    SSPCON
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x0020       [2]    ___DoICPAddr
0x0022       [2]    main_timer_L0
0x0024       [2]    main_ACCEL_XOUT_L0
0x0026       [2]    main_ACCEL_YOUT_L0
0x0028       [2]    main_ACCEL_ZOUT_L0
0x002A       [1]    FARG_EUSART_write_char_msg
0x002A       [1]    FARG_I2C_Write_i2c_byte
0x002A       [1]    FARG_I2C_Read_master_ack
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0089       [1]    TRISE
0x0091       [1]    SSPCON2
0x0093       [1]    SSPADD
0x0094       [1]    SSPSTAT
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
0x009A       [1]    SPBRGH
0x0187       [1]    BAUDCTL
0x0188       [1]    ANSEL
0x0189       [1]    ANSELH
